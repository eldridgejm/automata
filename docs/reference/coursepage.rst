Coursepage
==========


Getting started
---------------

To create a starter website, run ``automata coursepage init <dirname>`` at the
command line. This will create a new directory at ``<dirname>`` and populate it
with a website using the default theme. The following directory structure will
be created under ``<dirname>``

.. code::

   static/
   pages/
   theme/
   config.yaml

The meaning of these files is as follows:

- ``config.yaml`` The file used to configure the website.
- ``theme/`` Contains the theme. Typically there is no need to edit the files in
  this directory.
- ``pages/`` Contains the pages of the website as markdown files. These will
  be converted to HTML when the website is built.
- ``static/`` Contains whatever images, binary files, etc., that should be distributed
  with the website. This directory is copied to the output directory when the website
  is built.


Building the website
--------------------

To build the coursepage, change to the website directory and run
``automata coursepage build <output_dir>``. This will place the results in
``<output_dir>``.

One of the key features of `automata` is the ability to generate a website
from course materials. To do this, `automata` must know where the exported
course materials are. If you have already built and published the course materials
using ``automata materials publish``, you can build the course webpage with
knowlege of the materials by invoking:

.. code::

   automata coursepage build --materials /path/to/exported/materials <output_dir>


Editing pages
-------------

New pages can be created by adding a markdown file in the ``pages/`` directory.
The name of the markdown file will determine the name of the HTML file in the
generated website. Editing an existing page is done by making changes to the
markdown file in ``pages/``.

Several variables are available for use within the pages via the Jinja2 templating
engine. The syntax for using a variable is to surround the variable name
with double curly braces; for example: ``{{ variable_name }}``. Values
within dictionaries can be accessed using dot notation; e.g., ``{{ foo.bar.baz
}}``. Interpolation of these variables occurs before conversion from markdown
to HTML.

The variables available for use are:

- ``input_path`` The absolute path to the website directory.
- ``output_path`` The absolute path to the directory where the results will appear.
- ``theme_path`` The absolute path to the directory containing the theme.
- ``materials_path`` If ``automata coursepage build`` was invoked with ``--materials``,
  this will be the path that was passed as the argument.
- ``materials`` If ``--materials`` was passed, this will be a :class:`Universe` object
  containing all of the course materials.
- ``config`` The configuration from the website's ``config.yaml`` as a dictionary.
- ``vars`` If ``automata coursepage build`` was invoked with ``--vars``, this will be
  a dictionary containing those variables.
- ``now`` A datetime object representing the time at which the website is being built.

Elements
--------

**Elements** are the core building-blocks of an `automata` coursepage. In
short, an element is a function that, when invoked from within a page, is
replaced by autogenerated HTML.

Probably the most important element provided by `automata` is the *Schedule*
element. This element generates a course schedule from the published materials.
There are also elements for generating a listing of all course materials,
showing navigation buttons, displaying a big announcement banner, etc.

To use an element within a page, use the same double curly brace syntax used
to reference a variable. For example, to use the announcement box element:

.. code::

   {{ elements.announcement_box(...) }}

Element functions expect a single argument: a dictionary describing their
configuration. The announcement box element expects its configuration to have
a "content" key with an associated message. We can provide this message as follows:

.. code::

   {{ elements.announcement_box({"content": "This is my message!"}) }}

Alternatively, we can provide the configuration in `config.yaml`. This is useful
for several reasons: 1) the configuration of some elements can be quite involved,
and it's nice to avoid clutter; and 2) by placing the configuration of all elements
in `config.yaml`, the most frequent changes to the website can all be made in one
place.

To use ``config.yaml`` to configure our announcement box, we simply create an
key in that file (the name is arbitrary):

.. code:: yaml

    my_announcement:
        content: This is my message!

Then reference this key when invoking the element:

.. code::

   {{ elements.announcement_box(config.my_announcement) }}

Announcement Box
~~~~~~~~~~~~~~~~

Displays a big announcement box on the page.

**Configuration**:

- ``content``  A markdown string containing the message.
- ``urgent`` *(Optional)* If true, the announcement box will be styled so as to appear
  more urgent. Default: false.


Button Bar
~~~~~~~~~~

A row of buttons, each of which is a link.

**Configuration**:

- ``buttons``  A list whose elements are dictionaries. Each dictionary
  must itself have the following keys:
    - ``text`` A string that will appear as the button's text.
    - ``subtext`` A string that will appear as the button's subtext.
    - ``icon`` The icon that will appear on the button.
    - ``url`` Where to go when the button is clicked.

**Example**:

.. code:: yaml

    my_button_bar:
        buttons:
            - text: Button 1
              subtext: Assignments, etc.
              icon: ðŸ˜€
              url: ./assignments.html

            - text: Button 2
              subtext: Syllabus
              icon: ðŸ˜€
              url: ./syllabus.html

            - text: Button 3
              subtext: More assignments
              icon: ðŸ˜€
              url: ./more-assignments.html


Listing
~~~~~~~

A table of course materials. Used as a complement to the Schedule element: the
Schedule groups by week, whereas a Listing collects all of the materials of the
same type into one place.

**Configuration**:

- ``collection``  The name of the collection whose artifacts will be listed.
- ``columns``  A list of column configurations. See below.
- ``numbered`` *(Optional)* Whether the rows should be numbered. Default: False.

A column configuration is a dictionary with the following keys:

- ``heading``  The string that will appear at the top of the column.
- ``cell_content``  A string that will appear in each cell of the column.
  This string will be interpolated using Jinja2. Since each row in the table
  corresponds to a different publication in the collection; when the string is
  interpolated, the current publication (as a
  :class:`automata.lib.materials.Publication` object) is available using the
  ``publication`` variable.
- ``requires`` *(Optional)* A dictionary describing what to do when some needed information
  is missing. There are several keys (all optional):

    - ``artifacts``: A list of artifact names that must be present.
    - ``metadata``: A list of metadata keys that must be present.
    - ``non_null_metadata``: A list of metadata keys that must be present and not null.
    - ``cell_content_if_missing``: A string that will appear if information is deemed
      to be missing.

**Example**:

.. code:: yaml

    collection: homeworks
    numbered: true
    columns:
        - heading: Problems
          cell_content: |
              <a href="{{ publication.artifacts['homework.txt'].path }}">
              Homework {{ publication.metadata.number }}
              </a>

          requires:
              artifacts:
                  - homework.txt
              cell_content_if_missing: Not yet released...

        - heading: Solutions
          cell_content: |
              <a href="{{ publication.artifacts['solution.txt'].path }}">
              Solution
              </a>
          requires:
              artifacts: 
                  - solution.txt
              cell_content_if_missing: Not yet released...

        - heading: Due
          cell_content: "{{ publication.metadata.due.strftime('%A, %b %d at %H:%M:%S') }}"


Schedule
~~~~~~~~

A week-by-week schedule generated from the course materials.

**Configuration**:

- ``first_week_start_date``:  The date of the first day in the first week.
  Used to determine the start and end of each subsequent week.
- ``week_topics``:  A list of strings containing the main topic of each
  week. This is used in the title for each week in the schedule.
- ``first_week_number``: *(Optional)* Integer. What should the first week's
  number be? Sometimes we think of the first week as week 0. Default: 1.
- ``week_order``: *(Optional)* Either the string ``this_week_first`` or ``this_week_last``.
  If the former, the current week is displayed first, followed by previous weeks, and
  future weeks at the end. If the latter, the weeks are shown in chronological order,
  with the current week in the middle. Default: ``this_week_first``.
- ``exams``: *(Optional)* A dictionary mapping exam names to their dates.
- ``week_announcements``: *(Optional)* A list containing dictionaries describing announcements.
  Each announcement must have a ``week`` key (integer) determining the week that the
  announcement will appear, and a ``content`` key containing a markdown string of the announcement's
  contents. Optionally, an ``urgent`` key (boolean) determines if the announcement should
  appear urgent (default: false).

Additionally, the configuration have ``lecture``, ``assignments``, and ``discussion``
keys. Their values are all very similar. Starting with ``lecture``:

- ``collection``: The collection containing the lectures.
- ``metadata_key_for_released``: The metadata key that contains the date that the lecture
  was released. This is used to place the lecture in the schedule.
- ``title``: A template string used to determine the title of a lecture. This
  will be interpolated using Jinja2 for each publication in the collection.
  The publication object is available via the ``publication`` variable.
- ``resources``: A list of resources that are available for the lecture.
  Each element must be a dictionary containing:
    
    - ``text``: A template string for displaying the resource. Will be evaluated
      for each publication in the collection, and the ``publication`` variable is available.
    - ``icon``: *(Optional)* An icon that will appear next to the resource.
    - ``requires``: *(Optional)* A dictionary describing what is needed for the resource
      to appear. Can contain ``artifacts``, ``metadata``, and ``non_null_metadata`` keys,
      each of which should be a list. In addition, there is a ``text_if_missing`` key describing
      what should be displayed if information is missing.

The configuration of ``assignments`` and ``discussions`` is nearly identical, except
that each of these should be *lists* of dictionaries; one dictionary for each type
of assignment or discussion. Additionally, the ``assignments`` configuration
should contain a ``metadata_key_for_due`` key giving the metadata used
to determine an assignment's due date. See the example below for clarity.

.. code:: yaml

    # what should the first week be numbered?
    first_week_number: 0

    # what is the first day of the first week? this is used to determine the
    # start and end of each subsequent week
    first_week_start_date: 2020-09-28

    exams:
        Midterm 01: 2020-10-15
        Midterm 02: 2020-11-22
        Final Exam: 2020-12-01

    # a list of the quarter's topics, week by week. the number of weeks will be
    # inferred from this list
    week_topics:
        - Introduction
        - Tables
        - Charts and Functions
        - Probability and Simulation
        - Statistics and Models
        - Hypothesis Testing
        - The Bootstrap
        - The Normal Curve
        - Regression
        - Conclusion
        - Finals Week

    week_announcements:
        - week: 0
          content: |
              ### Welcome to DSC 10

              Here's how to get started:

              - read the [syllabus](./syllabus.html)
              - join our [campuswire](http://campuswire.com) with access code 231234
              - join our [gradescope](http://gradescope.com) with access code 901281

              See you in lecture.
              

    lecture:
        
        # what collection contains lectures?
        collection: lectures

        # what metadata key contains the lecture's date? this is used to place
        # the lecture into the correct week
        metadata_key_for_released: date

        # what should be displayed as the lecture's title? template string.
        title: "Lecture {{ publication.metadata.number }} &mdash; {{ publication.metadata.topic }}"

        # what resources are available for each lecture?
        resources:
            - 
              # the 
              text: "<a href={{ publication.artifacts['lecture.ipynb'].path }}>Lecture Notebook</a>"
              icon: em-spiral_note_pad

            - text: 'Reading: <a href="http://diveintods.com">Dive into Data Science</a>'
              icon: em-book
        parts:
            key: videos
            text: '<a href="{{ part.url }}">{{ part.title }}</a>'

    assignments:

        - collection: projects
          metadata_key_for_released: released
          metadata_key_for_due: due
          title: "Project"
          resources:
              - text: "Notebook"
                requires:
                    artifacts:
                        - project.ipynb
                    text_if_missing: Not posted yet...

        # homeworks
        - 
          # what collection contains the assignment?
          collection: homeworks

          # what metadata key contains the homework's release date? this is
          # used to place the assignment in the correct week.
          metadata_key_for_released: released

          # what metadata key contains the assignment's due date?
          metadata_key_for_due: due

          # what should be displayed as the assignment's title? template string.
          title: "Homework {{ publication.metadata.number }}"

          # what resources are available for each assignment?
          resources:
              
              # homework notebooks
              - text: "<a href={{ publication.artifacts['homework.txt'].path }}>Homework Notebook</a>"
                icon: em-question
                requires:
                    artifacts:
                        - homework.txt
                    text_if_missing: Not released yet...

              # solution notebooks
              - text: "<a href={{ publication.artifacts['solution.txt'].path }}>Solution Notebook</a>"
                icon: em-mag
                #
                # do not display this resource if the following artifact doesn't exist
                requires:
                    artifacts:
                        - solution.txt

    discussions:

        -
            collection: discussions
            metadata_key_for_released: date
            title: 'Discussion {{ publication.metadata.number }}'

            resources:
                - text: <a href="{{ publication.artifacts['discussion.ipynb'].path }}">Discussion Notebook</a>
                  icon: em-spiral_note_pad
                  requires:
                      artifacts:
                          - discussion.ipynb
                - text: Recording!
                  requires:
                      metadata:
                          - recording

