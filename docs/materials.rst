Working with course materials
=============================

Terminology
-----------

An **artifact** is a file -- usually one that is generated by some build
process. For example, a PDF of homework problems, or a Jupyter Notebook used in
a lecture.

A **publication** is a coherent group of one or more artifacts and their
metadata. For example, a homework with three artifacts: a PDF of the problems,
a PDF of the solutions, and a Zip containing the homework as a LaTeX template.

A **collection** is a group of publications which all satisfy the same
**publication schema**.

A **publication schema** is a set of constraints on a publication's artifacts
and metadata.

This establishes a **collection → publication → artifact hierarchy**: each
artifact belongs to exactly one publication, and each publication belongs to
exactly one collection.

An artifact may have a **release time**, before which it will not be built or
published. Likewise, entire publications can have release times, too.


Defining a collection with `collection.yaml`
--------------------------------------------

To use `automata` we must annotate and identify all course materials so that
they can be automatically discovered. The first step in doing so is to create
one or more **collections**.

A collection is created by placing a `collection.yaml` file in a directory; the
subtree of this directory will be recursively searched for publications, and
any found will be identified with this collection. The name of the directory
will determine the name of the collection. For instance, suppose course
materials have the following directory structure:

.. code::

   homeworks/
        01-introduction/
        02-linear_algebra/
        03-quantum_mechanics/
   labs/
        01-introduction/
        02-linear_algebra/

Creating `homeworks/collection.yaml` will make a collection named "homeworks",
and creating `labs/collection.yaml` will make a collection named "labs".

The contents of `collection.yaml` are important, too; they define the
**publication schema** that all publications in the collection must follow.
That is, `collection.yaml` describes the artifacts and metadata that each
publication in the collection must have.

An example `collection.yaml` is shown below:

.. code:: yaml

    publication_schema:
        required_artifacts:
            - homework.pdf
            - solution.pdf

        optional_artifacts:
            - template.zip

        metadata_schema:
            required_keys:
                name:
                    type: string
                number:
                    type: number
            optional_keys:
                due:
                    type: datetime

        allow_unspecified_artifacts: false

        is_ordered: true

This `collection.yaml` says that all publications within the collection must define
`homework.pdf` and `solution.pdf` artifacts. They may optionally have a `template.zip`
artifact. And all publications must provide some metadata: a name (string), number (integer),
and (optionally), a due date.

More generally, `collection.yaml` must contain a dictionary with one key:
`publication_schema`. The value should itself be a dictionary containing the
following:

- :code:`required_artifacts`: *(Required)* A list of strings naming the artifacts that must
  be supplied by each member publication.

- :code:`optional_artifacts`: *(Optional)* A list of strings naming artifacts that may
  optionally be supplied by a member publication. Defaults to the empty list.

- :code:`metadata_schema`: *(Optional)* A dictionary describing the schema that each member
  publication's metadata must follow. The schema should be in `dictconfig` format. Alternatively,
  this can be set to a null value in order to signal that no validation or parsing of the
  metadata should be done. Default: null.

- :code:`allow_unspecified_artifacts`: *(Optional)* A boolean value; if true, the
  member publications are permitted to have artifacts that are not named under
  `required_artifacts` or `optional_artifacts` above. By default this is false.

- :code:`is_ordered`: *(Optional)* A boolean value; if true, the lexicographic ordering of
  the member publications is considered meaningful. This allows publications to reference
  previous publications in the order. The default is false.


Defining a publication with `publication.yaml`
----------------------------------------------

Individual publications within a collection are defined by creating a `publication.yaml` file
for each. This file typically resides within the directory containing that publication's
files. For example, our directory structure from above with added publications may look like:

.. code::

   homeworks/
        collection.yaml
        01-introduction/
            publication.yaml
        02-linear_algebra/
            publication.yaml
        03-quantum_mechanics/
            publication.yaml
   labs/
        collection.yaml
        01-introduction/
            publication.yaml
        02-linear_algebra/
            publication.yaml

The purpose of `publication.yaml` is twofold. First, it defines all of the
publication's artifacts, how to build them, and when they should be released.
Second, it defines all of the metadata associated with the publication. The
artifacts and metadata will be checked against the schema specified in
`collection.yaml`.

An example `publication.yaml` is shown below. It satisfies the publication
schema described by the `collection.yaml` from before.

.. code:: yaml

    ready: true

    metadata:
        name: Homework 01
        number: 1
        due: 2021-10-15 23:59:00

    artifacts:
        homework.pdf:
            recipe: make homework
            ready: true
            release_time: 7 days before ${self.metadata.due}

        solution.pdf:
            recipe: make solution
            ready: false
            release_time: 1 day after ${self.metadata.due}

        template.zip:
            recipe: make template
            missing_ok: true
            release_time: ${self.artifacts."homework.pdf".release_time}





Using the command line interface
--------------------------------
